"""
Euler 44: Pentagonal Numbers

Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten
pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 
70  22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and 
difference is pentagonal and D = |Pk - Pj| is minimised; what is the value of D?

i,j s.t.:

i(3i-1)+j(3j-1)==k(3k-1)
3i**2-i+3j**2-j==3k**2-k
3(i**2+j**2-k**2)==i+j-k

i(3i-1)-j(3j-1)==l(3l-1)
3i**2-i-3j**2+j==3l**2-l
3(i**2-j**2-l**2)==i-j-l
"""
import math

def pgen(i):
	j=1
	p=[]
	for n in range(j,i+1):
		p.append(n*(3*n-1)/2)
	return p

def test(pset):
	for i in range(0,len(pset)-1):
		for j in range(i+1,len(pset)):
			testpair=[pset[i]+pset[j],pset[j]-pset[i]]
			if len(set(testpair).difference(set(pset)))==0:
				print '%d,%d' % (pset[i],pset[j])

def owtest(pset):
	for i in range(0,len(pset)/2):
		for j in range(i+1,len(pset)/2):
			pass

"""
so I need to identify four numbers within a set

h i j k
st: 
h+i=j
h+2i=k

P=n(3n-1)/2
2P=n(3n-1)
0=1.5n**2-.5n-P
-b+-sqrt(b**2-4ac)/2a
.5+-sqrt(.25+6P)/3
"""
def pent(n):
	return n*(3*n-1)/2
	
def isPent(p):
	return (.5+math.sqrt(.25+6*p))/3%1==0
	
def trials(x):
	for i in range(1,x-1):
		pi=pent(i)
		for j in range(i,x):
			pj=pent(j)
			if isPent(pi+pj):
				print "{0!s},{1!s}: {0!s} + {1!s} == {2!s} {4!s}  |  {1!s} + {2!s} == {3!s} {5!s}".format(pi,pj,pi+pj,pi+pj*2,isPent(pi+pj),isPent(pi+pj*2))
				if isPent(pi+pj*2):
					print "SUCCESS: "+str(i)+", "+str(j)


trials(10000)
